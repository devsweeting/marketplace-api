name: 'Test'
on:
  push:
    tags:
      - test
jobs:
  test-and-deploy:
    name: 'Test & Deploy'
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          AWS_DEFAULT_REGION: us-west-2
          EDGE_PORT: 4566
          SERVICES: s3
        ports: ["4566:4566"]
      postgres:
        image: postgres
        env:
          POSTGRES_PORT: 5432
          POSTGRES_DB: 'test'
          POSTGRES_USERNAME: 'postgres'
          POSTGRES_PASSWORD: 'password'
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v2

      - name: 'Setup NodeJS 14'
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: 'Install Dependencies'
        run: yarn install

      - name: 'Build'
        run: yarn build

      - name: 'Fixtures'
        run: yarn fixtures
        env:
          TYPEORM_PORT: ${{ job.services.postgres.ports['5432'] }}

      - name: 'Run e2e Tests'
        id: tests
        run: yarn test:e2e
        env:
          TYPEORM_HOST: localhost
          TYPEORM_PORT: ${{ job.services.postgres.ports['5432'] }}

      - name: Configure AWS credentials
        id: aws_creds
        if: |
          github.ref == 'refs/heads/test' &&
          github.event_name == 'push' &&
          steps.tests.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TEST_AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_login
        if: |
          github.ref == 'refs/heads/test' &&
          github.event_name == 'push' &&
          steps.aws_creds.outcome == 'success'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: ecr
        if: |
          github.ref == 'refs/heads/test' &&
          github.event_name == 'push' &&
          steps.ecr_login.outcome == 'success'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: api-test
          IMAGE_TAG: latest
          DOCKER_FILE: Dockerfile.ecs
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Restart API and ADMIN services to enfore pulling latest/newest ECR image
        if: |
          github.ref == 'refs/heads/test' &&
          github.event_name == 'push' &&
          steps.ecr.outcome == 'success'
        env:
          CLUSTER_NAME: jumpco-cluster-test
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service api-test --force-new-deployment
          aws ecs update-service --cluster $CLUSTER_NAME --service admin-test --force-new-deployment

